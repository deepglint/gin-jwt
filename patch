diff --git a/auth_jwt.go b/auth_jwt.go
index cc1bafd..187671b 100644
--- a/auth_jwt.go
+++ b/auth_jwt.go
@@ -64,12 +64,15 @@ type GinJWTMiddleware struct {
 	// - "query:<name>"
 	// - "cookie:<name>"
 	TokenLookup string
+
+	currentToken string
 }
 
 // Login form structure.
 type Login struct {
 	Username string `form:"username" json:"username" binding:"required"`
 	Password string `form:"password" json:"password" binding:"required"`
+	Timeout  int    `form:"timeout" json:"timeout"`
 }
 
 // MiddlewareInit initialize jwt configs.
@@ -135,6 +138,11 @@ func (mw *GinJWTMiddleware) MiddlewareFunc() gin.HandlerFunc {
 func (mw *GinJWTMiddleware) middlewareImpl(c *gin.Context) {
 	token, err := mw.parseToken(c)
 
+	if token.Raw != mw.currentToken {
+		mw.unauthorized(c, http.StatusUnauthorized, "Token was refreshed")
+		return
+	}
+
 	if err != nil {
 		mw.unauthorized(c, http.StatusUnauthorized, err.Error())
 		return
@@ -190,6 +198,10 @@ func (mw *GinJWTMiddleware) LoginHandler(c *gin.Context) {
 		userID = loginVals.Username
 	}
 
+	if loginVals.Timeout > 0 {
+		mw.Timeout = time.Duration(loginVals.Timeout) * time.Hour
+	}
+
 	expire := time.Now().Add(mw.Timeout)
 	claims["id"] = userID
 	claims["exp"] = expire.Unix()
@@ -202,6 +214,9 @@ func (mw *GinJWTMiddleware) LoginHandler(c *gin.Context) {
 		return
 	}
 
+	//
+	mw.currentToken = tokenString
+
 	c.JSON(http.StatusOK, gin.H{
 		"token":  tokenString,
 		"expire": expire.Format(time.RFC3339),
@@ -221,27 +236,32 @@ func (mw *GinJWTMiddleware) RefreshHandler(c *gin.Context) {
 		mw.unauthorized(c, http.StatusUnauthorized, "Token is expired.")
 		return
 	}
+	/*
+		// Create the token
+		newToken := jwt.New(jwt.GetSigningMethod(mw.SigningAlgorithm))
+		newClaims := newToken.Claims.(jwt.MapClaims)
 
-	// Create the token
-	newToken := jwt.New(jwt.GetSigningMethod(mw.SigningAlgorithm))
-	newClaims := newToken.Claims.(jwt.MapClaims)
-
-	for key := range claims {
-		newClaims[key] = claims[key]
-	}
-
+		for key := range claims {
+			newClaims[key] = claims[key]
+		}
+		expire := time.Now().Add(mw.Timeout)
+		newClaims["id"] = claims["id"]
+		newClaims["exp"] = expire.Unix()
+		newClaims["orig_iat"] = origIat
+	*/
 	expire := time.Now().Add(mw.Timeout)
-	newClaims["id"] = claims["id"]
-	newClaims["exp"] = expire.Unix()
-	newClaims["orig_iat"] = origIat
+	claims["exp"] = expire.Unix()
 
-	tokenString, err := newToken.SignedString(mw.Key)
+	tokenString, err := token.SignedString(mw.Key)
 
 	if err != nil {
 		mw.unauthorized(c, http.StatusUnauthorized, "Create JWT Token faild")
 		return
 	}
 
+	//
+	mw.currentToken = tokenString
+
 	c.JSON(http.StatusOK, gin.H{
 		"token":  tokenString,
 		"expire": expire.Format(time.RFC3339),
@@ -288,12 +308,13 @@ func (mw *GinJWTMiddleware) jwtFromHeader(c *gin.Context, key string) (string, e
 		return "", errors.New("auth header empty")
 	}
 
-	parts := strings.SplitN(authHeader, " ", 2)
-	if !(len(parts) == 2 && parts[0] == "Bearer") {
-		return "", errors.New("invalid auth header")
-	}
+	// parts := strings.SplitN(authHeader, " ", 2)
+	// if !(len(parts) == 2 && parts[0] == "Bearer") {
+	// 	return "", errors.New("invalid auth header")
+	// }
 
-	return parts[1], nil
+	// return parts[1], nil
+	return authHeader, nil
 }
 
 func (mw *GinJWTMiddleware) jwtFromQuery(c *gin.Context, key string) (string, error) {
